{"version":3,"sources":["components/Dashboard.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboard","price","data","className","options","tooltips","intersect","mode","responsive","maintainAspectRatio","formatData","finalData","labels","datasets","label","backgroundColor","borderColor","fill","dates","map","val","ts","date","Date","day","getDate","month","getMonth","year","getFullYear","priceArr","reverse","App","useState","currencies","setcurrencies","pair","setpair","setprice","pastData","setpastData","ws","useRef","first","url","useEffect","current","WebSocket","pairs","a","fetch","then","res","json","filtered","filter","quote_currency","sort","b","base_currency","apiCall","msg","type","product_ids","channels","jsonMsg","JSON","stringify","send","historicalDataURL","dataArr","formattedData","fetchHistoricalData","onmessage","e","parse","product_id","name","value","onChange","unsubMsg","unsub","target","cur","idx","id","display_name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14914dff.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nfunction Dashboard({ price, data }) {\n  const opts = {\n    tooltips: {\n      intersect: false,\n      mode: \"index\"\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n  if (price === \"0.00\") {\n    return <h2>please select a currency pair</h2>;\n  }\n  return (\n    <div className=\"dashboard\">\n      <h2>{`â‚¬${price}`}</h2>\n\n      <div className=\"chart-container\">\n        <Line data={data} options={opts} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;","export const formatData = (data) => {\n    let finalData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Price\",\n          data: [],\n          backgroundColor: \"rgb(66, 212, 126, 0.8)\",\n          borderColor: \"rgba(66, 212, 126, 0.2)\",\n          fill: false\n        }\n      ]\n    };\n  \n    let dates = data.map((val) => {\n      const ts = val[0];\n      let date = new Date(ts * 1000);\n      let day = date.getDate();\n      let month = date.getMonth() + 1;\n      let year = date.getFullYear();\n  \n      let final = `${month}-${day}-${year}`;\n      return final;\n    });\n  \n    let priceArr = data.map((val) => {\n      return val[4];\n    });\n  \n    priceArr.reverse();\n    dates.reverse();\n    finalData.labels = dates;\n    finalData.datasets[0].data = priceArr;\n\n    return finalData;\n  };","import React, { useState, useEffect, useRef } from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport { formatData } from \"./utils\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [currencies, setcurrencies] = useState([]);\n  const [pair, setpair] = useState(\"\");\n  const [price, setprice] = useState(\"0.00\");\n  const [pastData, setpastData] = useState({});\n  const ws = useRef(null);\n\n  let first = useRef(false);\n  const url = \"https://api.pro.coinbase.com\";\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"wss://ws-feed.pro.coinbase.com\");\n\n    let pairs = [];\n\n    const apiCall = async () => {\n      await fetch(url + \"/products\")\n        .then((res) => res.json())\n        .then((data) => (pairs = data));\n      \n      let filtered = pairs.filter((pair) => {\n        if (pair.quote_currency === \"EUR\") {\n          return pair;\n        }\n      });\n\n      filtered = filtered.sort((a, b) => {\n        if (a.base_currency < b.base_currency) {\n          return -1;\n        }\n        if (a.base_currency > b.base_currency) {\n          return 1;\n        }\n        return 0;\n      });\n\n      \n      setcurrencies(filtered);\n\n      first.current = true;\n    };\n\n    apiCall();\n  }, []);\n\n  useEffect(() => {\n    if (!first.current) {\n      \n      return;\n    }\n\n    \n    let msg = {\n      type: \"subscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let jsonMsg = JSON.stringify(msg);\n    ws.current.send(jsonMsg);\n\n    let historicalDataURL = `${url}/products/${pair}/candles?granularity=86400`;\n    const fetchHistoricalData = async () => {\n      let dataArr = [];\n      await fetch(historicalDataURL)\n        .then((res) => res.json())\n        .then((data) => (dataArr = data));\n      \n      let formattedData = formatData(dataArr);\n      setpastData(formattedData);\n    };\n\n    fetchHistoricalData();\n\n    ws.current.onmessage = (e) => {\n      let data = JSON.parse(e.data);\n      if (data.type !== \"ticker\") {\n        return;\n      }\n\n      if (data.product_id === pair) {\n        setprice(data.price);\n      }\n    };\n  }, [pair]);\n\n  const handleSelect = (e) => {\n    let unsubMsg = {\n      type: \"unsubscribe\",\n      product_ids: [pair],\n      channels: [\"ticker\"]\n    };\n    let unsub = JSON.stringify(unsubMsg);\n\n    ws.current.send(unsub);\n\n    setpair(e.target.value);\n  };\n  return (\n    <div className=\"container\">\n      {\n        <select name=\"currency\" value={pair} onChange={handleSelect}>\n          {currencies.map((cur, idx) => {\n            return (\n              <option key={idx} value={cur.id}>\n                {cur.display_name}\n              </option>\n            );\n          })}\n        </select>\n      }\n      <Dashboard price={price} data={pastData} />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}